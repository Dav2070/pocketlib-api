(var json (parse_json (get_body)))

(var first_name json.first_name)
(var last_name json.last_name)

(# Get the jwt)
(var jwt (get_header Authorization))
(func render_validation_errors ((list
	(func validate_jwt_missing (jwt))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header Content-Type)))
)))

(# Decode the jwt)
(var decoded_jwt (func decode_jwt (jwt)))

(# Validate the dev)
(func render_validation_errors ((list
	(func validate_dev_is_pocketlib_dev (decoded_jwt.dev_id))
)))

(# Check if the user is an admin)
(var is_admin (env.ADMINS.contains decoded_jwt.user_id))

(# Get the authors of the user)
(var authors (func get_author_table_objects (decoded_jwt.user_id)))

(if ((! is_admin) and (authors.length > 0)) (
	(func render_validation_errors ((list (hash (error (get_error 1106)) (status 400)))))
))

(# Validate missing fields)
(func render_validation_errors ((list 
	(func validate_first_name_missing (first_name)) 
	(func validate_last_name_missing (last_name))
)))

(# Validate field types)
(func render_validation_errors ((list
	(func validate_first_name_wrong_type (first_name))
	(func validate_last_name_wrong_type (last_name))
)))

(# Validate too short and too long fields)
(func render_validation_errors ((list
	(func validate_first_name_too_short (first_name))
	(func validate_first_name_too_long (first_name))
	(func validate_last_name_too_short (last_name))
	(func validate_last_name_too_long (last_name))
)))

(# Create the author)
(var author (func create_author_table_object (decoded_jwt.user_id (hash (first_name first_name) (last_name last_name)))))

(# Render the result)
(render_json (hash 
	(uuid author.uuid) 
	(first_name first_name) 
	(last_name last_name) 
	(bios (list))
	(profile_image false)
	(collections (list))
) 201)