(if (is_nil books) (
	(var books false)
) else (
	(var books (books == "true"))
))

(if books (
	(# Get the language)
	(if (is_nil language) (
		(var language "en")
	) else (
		(# Validate the language)
		(func render_validation_errors ((list
			(func validate_language_supported (language))
		)))
	))
))

(# Get the author)
(var author (func get_table_object (uuid env.AUTHOR_TABLE_ID)))

(if (is_nil author) (
	(# Author does not exist)
	(func render_validation_errors ((list (hash (error (get_error 2803)) (status 404)))))
))

(# Get the bios of the author)
(var bios (func get_author_bios_by_string (author.properties.bios false)))

(if books (
	(# Get all store books of the author)
	(var author_books (list))
	(var all_store_books (func get_store_book_table_objects (author.user_id)))

	(for book in all_store_books (
		(if ((book.properties.status == "published") and (book.properties.language == language)) (
			(author_books.push (hash
				(uuid book.uuid)
				(title book.properties.title)
				(description book.properties.description)
				(language book.properties.language)
				(status book.properties.status)
				(cover (!(is_nil book.properties.cover)))
				(file (!(is_nil book.properties.file)))
			))
		))
	))
	
	(# Render the result)
	(render_json (hash
		(uuid author.uuid)
		(first_name author.properties.first_name)
		(last_name author.properties.last_name)
		(bios bios)
		(books author_books)
		(profile_image (!(is_nil author.properties.profile_image)))
	))
) else (
	(# Get the collections of the author)
	(var collections (func get_collections_by_string (author.properties.collections)))

	(# Render the result)
	(render_json (hash
		(uuid author.uuid)
		(first_name author.properties.first_name)
		(last_name author.properties.last_name)
		(bios bios)
		(collections collections)
		(profile_image (!(is_nil author.properties.profile_image)))
	) 200)
))