(# Get the jwt)
(var jwt (get_header Authorization))
(func render_validation_errors ((list
	(func validate_jwt_missing (jwt))
)))

(# Decode the jwt)
(var decoded_jwt (func decode_jwt (jwt)))

(# Validate the dev)
(func render_validation_errors ((list
	(func validate_dev_is_pocketlib_dev (decoded_jwt.dev_id))
)))

(# Check if the user is an admin)
(var is_admin (env.ADMINS.contains decoded_jwt.user_id))

(# Get the authors of the user)
(var author_objects (func get_author_table_objects (decoded_jwt.user_id)))
(if ((author_objects.length == 0) and (! is_admin)) (
	(# Render Resource does not exist: Author error)
	(func render_validation_errors ((list (hash (error (get_error 1105)) (status 400)))))
))

(# Define functions for getting the collections of an author)
(def get_collections (collections_string) (
	(var collections (list))

	(if (!(is_nil collections_string)) (
		(# Get each collection of the author)
		(var collection_uuids (collections_string.split ","))

		(for uuid in collection_uuids (
			(var collection (TableObject.get uuid))

			(if (!(is_nil collection)) (
				(# Get the names of the collection)
				(var names_string collection.properties.names)
				(var names (list))

				(if (!(is_nil names_string)) (
					(# Get each name of the collection)
					(var name_uuids (names_string.split ","))

					(for name_uuid in name_uuids (
						(var name (TableObject.get name_uuid))

						(if (!(is_nil name)) (
							(names.push (hash (name name.properties.name) (language name.properties.language)))
							(up names)
						))

						(up names)
					))

					(up names)
				))

				(collections.push (hash (uuid collection.uuid) (names names)))
				(up collections)
			))

			(up collections)
		))

		(up collections)
	))

	(return collections)
))

(if is_admin (
	(var authors (list))

	(for author in author_objects (
		(# Get the collections of the author)
		(var collections (func get_collections (author.properties.collections)))

		(authors.push (hash
			(uuid author.uuid)
			(first_name author.properties.first_name)
			(last_name author.properties.last_name)
			(bio author.properties.bio)
			(collections collections)
		))

		(up authors)
	))

	(# Render the result)
	(render_json (hash (authors authors)) 200)
) else (
	(var author author_objects#0)

	(# Get the collections of the author)
	(# var collections_string author.properties.collections)
	(var collections (func get_collections (author.properties.collections)))

	(# Render the result)
	(render_json (hash
		(uuid author.uuid)
		(first_name author.properties.first_name)
		(last_name author.properties.last_name)
		(bio author.properties.bio)
		(collections collections)
	) 200)
))