(var data (get_body))

(# Get the jwt)
(var jwt (get_header Authorization))
(func render_validation_errors ((list
	(func validate_jwt_missing (jwt))
)))

(# Check if content type is supported)
(var content_type (get_header Content-Type))
(func render_validation_errors ((list
	(func validate_content_type_image (content_type))
)))

(# Decode the jwt)
(var decoded_jwt (func decode_jwt (jwt)))

(# Validate the dev)
(func render_validation_errors ((list
	(func validate_dev_is_pocketlib_dev (decoded_jwt.dev_id))
)))

(# Check if the user is an admin)
(var is_admin (env.ADMINS.contains decoded_jwt.user_id))

(if (! is_admin) (
	(func render_validation_errors ((list (hash (error (get_error 1102)) (status 403)))))
))

(# Get the author)
(var author (func get_table_object (uuid env.AUTHOR_TABLE_ID)))

(if (is_nil author) (
	(func render_validation_errors ((list (hash (error (get_error 2802)) (status 404)))))
))

(# Check if the author belongs to the user)
(if (decoded_jwt.user_id != author.user_id) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1102)) (status 403)))))
))

(# Define functions for creating and updating the profile image table object)
(def create_profile_image () (
	(# Create the profile image table object)
	(var profile_image (func create_author_profile_image_table_object (decoded_jwt.user_id content_type data)))

	(# Update the author with the uuid of the profile image table object)
	(var author.properties.profile_image profile_image.uuid)
))

(def update_profile_image () (
	(# Update the profile image table object of the author)
	(func update_author_profile_image_table_object (profile_image.uuid content_type data))
))

(# Get the profile image table object of the author)
(var profile_image_uuid author.properties.profile_image)

(if (is_nil profile_image_uuid) (
	(# Create the profile image)
	(func create_profile_image ())
) else (
	(# Try to get the profile image table object)
	(var profile_image (func get_table_object (profile_image_uuid env.AUTHOR_PROFILE_IMAGE_TABLE_ID)))

	(if (is_nil profile_image) (
		(# Create the profile image)
		(func create_profile_image ())
	) else (
		(# Update the profile image)
		(func update_profile_image ())
	))
))

(render_json (hash) 200)