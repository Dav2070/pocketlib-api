(var json (parse_json (get_body)))

(var key json.key)

(# Get the jwt)
(var jwt (get_header Authorization))
(func render_validation_errors ((list
	(func validate_jwt_missing (jwt))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header Content-Type)))
)))

(# Decode the jwt)
(var decoded_jwt (func decode_jwt (jwt)))

(# Validate the dev)
(func render_validation_errors ((list
	(func validate_dev_is_pocketlib_dev (decoded_jwt.dev_id))
)))

(# Check if the user is an admin)
(var is_admin (env.ADMINS.contains decoded_jwt.user_id))
(if (! is_admin) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1102)) (status 403)))))
))

(# Validate missing fields)
(func render_validation_errors ((list
	(func validate_key_missing (key))
)))

(# Validate property types)
(func render_validation_errors ((list
	(func validate_key_wrong_type (key))
)))

(# Validate too short and too long fields)
(func render_validation_errors ((list
	(func validate_key_length (key))
)))

(# Validate the key)
(func render_validation_errors ((list
	(func validate_key_invalid (key))
)))

(var key key.downcase)

(# Check if a category with the key already exists)
(var categories (TableObject.find_by_property env.ADMINS#0 env.CATEGORY_TABLE_ID "key" key))

(if (categories.length > 0) (
	(# Key already taken)
	(func render_validation_errors ((list (hash (error (get_error 2601)) (status 422)))))
))

(# Create the category)
(var category (func create_table_object (env.ADMINS#0 env.CATEGORY_TABLE_ID (hash (key key)))))

(# Render the result)
(render_json (hash
	(uuid category.uuid)
	(key category.properties.key)
	(names (list))
) 201)