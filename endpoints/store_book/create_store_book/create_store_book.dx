(var json (parse_json (get_body)))

(var title json.title)
(var description json.description)
(var language json.language)

(# Get the jwt)
(var jwt (get_header Authorization))
(func render_validation_errors ((list
	(func validate_jwt_missing (jwt))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header Content-Type)))
)))

(# Decode the jwt)
(var decoded_jwt (func decode_jwt (jwt)))

(# Validate the dev)
(func render_validation_errors ((list
	(func validate_dev_is_pocketlib_dev (decoded_jwt.dev_id))
)))

(# Validate missing fields)
(func render_validation_errors ((list
	(func validate_title_missing (title))
	(func validate_language_missing (language))
)))

(# Validate the property type)
(func render_validation_errors ((list
	(func validate_title_wrong_type (title))
	(if (!(is_nil description)) (func validate_description_wrong_type (description)))
	(func validate_language_wrong_type (language))
)))

(# Validate the property length)
(func render_validation_errors ((list
	(func validate_title_too_short (title))
	(if (!(is_nil description)) (func validate_description_too_short (description)))
)))

(func render_validation_errors ((list
	(func validate_title_too_long (title))
	(if (!(is_nil description)) (func validate_description_too_long (description)))
)))

(# Validate the language)
(func render_validation_errors ((list
	(func validate_language_supported (language))
)))

(# Get the author of the user)
(var authors (func get_author_table_objects (decoded_jwt.user_id)))
(if (authors.length == 0) (
	(# Render User is not an author error)
	(func render_validation_errors ((list (hash (error (get_error 1105)) (status 400)))))
))

(var author authors#0)

(# Create the store book)
(var store_book_properties (hash (author author.uuid) (title title) (language language)))
(if (!(is_nil description)) (
	(var store_book_properties.description description)
	(up store_book_properties)
))

(var store_book (func create_store_book_table_object (decoded_jwt.user_id store_book_properties)))

(# Update the author with the book)
(func add_book_to_author (author store_book.uuid))

(render_json (hash 
	(uuid store_book.uuid) 
	(title store_book.properties.title) 
	(description store_book.properties.description)
	(language store_book.properties.language)
	(cover false)
	(file false)
	(status "unpublished")
) 201)