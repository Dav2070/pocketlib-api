(var json (parse_json (get_body)))

(var collection json.collection)
(var title json.title)
(var description json.description)
(var language json.language)

(# Get the jwt)
(var jwt (get_header Authorization))
(func render_validation_errors ((list
	(func validate_jwt_missing (jwt))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header Content-Type)))
)))

(# Decode the jwt)
(var decoded_jwt (func decode_jwt (jwt)))

(# Validate the dev)
(func render_validation_errors ((list
	(func validate_dev_is_pocketlib_dev (decoded_jwt.dev_id))
)))

(# Validate missing fields)
(func render_validation_errors ((list
	(func validate_collection_missing (collection))
	(func validate_title_missing (title))
	(func validate_language_missing (language))
)))

(# Validate the property type)
(func render_validation_errors ((list
	(func validate_collection_wrong_type (collection))
	(func validate_title_wrong_type (title))
	(if (!(is_nil description)) (func validate_description_wrong_type (description)))
	(func validate_language_wrong_type (language))
)))

(# Validate the property length)
(func render_validation_errors ((list
	(func validate_collection_length (collection))
	(func validate_title_length (title))
	(if (!(is_nil description)) (func validate_description_length (description)))
)))

(# Validate the language)
(func render_validation_errors ((list
	(func validate_language_supported (language))
)))

(# Get the author of the user)
(var authors (func get_author_table_objects (decoded_jwt.user_id)))
(if (authors.length == 0) (
	(# Render User is not an author error)
	(func render_validation_errors ((list (hash (error (get_error 1105)) (status 400)))))
))

(var author authors#0)

(# Get the collection)
(var collection_obj (func get_table_object (collection env.STORE_BOOK_COLLECTION_TABLE_ID)))

(if (is_nil collection_obj) (
	(# Collection does not exist)
	(func render_validation_errors ((list (hash (error (get_error 2805)) (status 404)))))
))

(# Check if the collection belongs to the user)
(if (collection_obj.user_id != decoded_jwt.user_id) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1102)) (status 403)))))
))

(# Create the store book)
(var store_book_properties (hash (collection collection_obj.uuid) (title title) (language language)))
(if (!(is_nil description)) (
	(var store_book_properties.description description)
))

(var store_book (func create_table_object (decoded_jwt.user_id env.STORE_BOOK_TABLE_ID store_book_properties)))

(# Update the collection with the book)
(func add_book_to_collection (collection_obj store_book.uuid))

(# Render the result)
(render_json (hash 
	(uuid store_book.uuid)
	(collection store_book.properties.collection)
	(title store_book.properties.title)
	(description store_book.properties.description)
	(language store_book.properties.language)
	(price 0)
	(status "unpublished")
	(cover false)
	(file false)
	(in_library false)
) 201)