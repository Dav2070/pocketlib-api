(var json (parse_json (get_body)))

(var collection json.collection)
(var title json.title)
(var description json.description)
(var language json.language)
(var price json.price)
(var isbn json.isbn)
(var categories json.categories)

(# Get the access token)
(var access_token (get_header Authorization))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header Content-Type)))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Validate missing fields)
(func render_validation_errors ((list
	(func validate_collection_presence (collection))
	(func validate_title_presence (title))
	(func validate_language_presence (language))
)))

(# Validate the property types)
(func render_validation_errors ((list
	(func validate_collection_type (collection))
	(func validate_title_type (title))
	(if (!(is_nil description)) (func validate_description_type (description)))
	(func validate_language_type (language))
	(if (!(is_nil price)) (func validate_price_type (price)))
	(if (!(is_nil isbn)) (func validate_isbn_type (isbn)))
	(if (!(is_nil categories)) (func validate_categories_type (categories)))
)))

(# Validate the property length)
(func render_validation_errors ((list
	(func validate_title_length (title))
	(if (!(is_nil description)) (func validate_description_length (description)))
)))

(# Validate the language)
(func render_validation_errors ((list
	(func validate_language_supported (language))
)))

(# Validate price and isbn)
(func render_validation_errors ((list
	(if (!(is_nil price)) (func validate_price_validity (price)))
	(if (!(is_nil isbn)) (func validate_isbn_validity (isbn)))
)))

(# Get the author of the user)
(var authors (func get_author_table_objects (session.user_id)))
(if (authors.length == 0) (
	(# Render User is not an author error)
	(func render_validation_errors ((list (hash (error (get_error 3000)) (status 400)))))
))

(var author authors#0)

(# Get the collection)
(var collection_obj (func get_table_object (collection env.STORE_BOOK_COLLECTION_TABLE_ID)))

(if (is_nil collection_obj) (
	(# Collection does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3506)) (status 404)))))
))

(# Check if the collection belongs to the user)
(if (collection_obj.user_id != session.user_id) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(# Create the store book)
(var store_book_properties (hash
	(collection collection_obj.uuid)
	(title title)
	(language language)
))

(if (!(is_nil description)) (
	(var store_book_properties.description description)
))

(if (!(is_nil price)) (
	(var store_book_properties.price price)
))

(if (!(is_nil isbn)) (
	(var store_book_properties.isbn isbn)
))

(var category_keys (list))
(if (!(is_nil categories)) (
	(# Get the uuids of the categories)
	(var category_objects (func get_category_table_objects ()))
	(var category_uuids (list))

	(for key in categories (
		(# Check if the key is already in the category_keys list)
		(if (category_keys.contains key) (break))

		(# Find the category with the key)
		(for obj in category_objects (
			(if (obj.properties.key == key) (
				(category_uuids.push obj.uuid)
				(category_keys.push key)
				(break)
			))
		))
	))

	(var store_book_properties.categories (category_uuids.join ","))
))

(var store_book (func create_table_object (session.user_id env.STORE_BOOK_TABLE_ID store_book_properties)))

(# Update the collection with the book)
(func add_book_to_collection (collection_obj store_book.uuid))

(# Render the result)
(render_json (hash 
	(uuid store_book.uuid)
	(collection store_book.properties.collection)
	(title store_book.properties.title)
	(description (if (is_nil store_book.properties.description) "" else store_book.properties.description))
	(language store_book.properties.language)
	(price (to_int store_book.properties.price))
	(isbn store_book.properties.isbn)
	(status "unpublished")
	(cover false)
	(cover_aspect_ratio nil)
	(cover_blurhash nil)
	(file false)
	(file_name nil)
	(categories category_keys)
	(in_library false)
	(purchased false)
) 201)