(# Get the jwt)
(var jwt (get_header Authorization))
(func render_validation_errors ((list
	(func validate_jwt_missing (jwt))
)))

(# Decode the jwt)
(var decoded_jwt (func decode_jwt (jwt)))

(# Validate the dev)
(func render_validation_errors ((list
	(func validate_dev_is_pocketlib_dev (decoded_jwt.dev_id))
)))

(# Check if the user is an admin)
(var is_admin (env.ADMINS.contains decoded_jwt.user_id))

(# Get the store book)
(var store_book (func get_table_object (uuid env.STORE_BOOK_TABLE_ID)))

(if (is_nil store_book) (
	(# StoreBook does not exist)
	(func render_validation_errors ((list (hash (error (get_error 2807)) (status 404)))))
))

(# Get the status)
(var status (if (is_nil store_book.properties.status) "unpublished" else store_book.properties.status))

(# Check if the user can access the store book)
(if (!(
	(is_admin or (status == "published")) 
	or (
		(# Get the collection of the store book)
		(var collection (func get_table_object (store_book.properties.collection env.STORE_BOOK_COLLECTION_TABLE_ID)))

		(# Get the author of the collection)
		(var author (func get_table_object (collection.properties.author env.AUTHOR_TABLE_ID)))

		(decoded_jwt.user_id == author.user_id)
	))) (
		(# Access not allowed)
		(func render_validation_errors ((list (hash (error (get_error 1102)) (status 403)))))
	)
)

(# Return the store book)
(render_json 
	(hash 
		(uuid store_book.uuid)
		(collection store_book.properties.collection)
		(title store_book.properties.title)
		(description store_book.properties.description)
		(language store_book.properties.language)
		(price (to_int store_book.properties.price))
		(status status)
		(cover (!(is_nil store_book.properties.cover)))
		(file (!(is_nil store_book.properties.file)))
	) 
	200
)