(var language_list (list))

(if (is_nil languages) (
	(language_list.push "en")
) else (
	(# Read the languages string and add the languages to the list)
	(for language in (languages.split ",") (
		(# Validate the languages)
		(func render_validation_errors ((list
			(func validate_language_supported (language))
		)))

		(language_list.push language)
	))
))

(# Get the category)
(var categories (TableObject.find_by_property env.ADMINS#0 env.CATEGORY_TABLE_ID "key" key))
(if (categories.length == 0) (
	(# Category does not exist)
	(func render_validation_errors ((list (hash (error (get_error 2810)) (status 404)))))
))

(var category categories#0)

(# Find StoreBooks with the category)
(var store_books (TableObject.find_by_property * env.STORE_BOOK_TABLE_ID "categories" category.uuid false))

(# Get the appropriate store books)
(var books (list))

(for store_book in store_books (
	(if ((store_book.properties.status == "published") and (language_list.contains store_book.properties.language)) (
		(# Get the categories)
		(var categories (func get_category_keys_by_string (store_book.properties.categories)))

		(books.push (hash
			(uuid store_book.uuid)
			(title store_book.properties.title)
			(description (if (is_nil store_book.properties.description) "" else store_book.properties.description))
			(language store_book.properties.language)
			(status store_book.properties.status)
			(cover_aspect_ratio store_book.properties.cover_aspect_ratio)
			(cover_blurhash store_book.properties.cover_blurhash)
			(cover (!(is_nil store_book.properties.cover)))
			(file (!(is_nil store_book.properties.file)))
			(categories categories)
		))
	))
))

(# Render the result)
(render_json (hash
	(books books)
) 200)