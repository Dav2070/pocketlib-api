(# Get the jwt)
(var jwt (get_header Authorization))
(func render_validation_errors ((list
	(func validate_jwt_missing (jwt))
)))

(# Decode the jwt)
(var decoded_jwt (func decode_jwt (jwt)))

(# Validate the dev)
(func render_validation_errors ((list
	(func validate_dev_is_pocketlib_dev (decoded_jwt.dev_id))
)))

(# Check if the user is an admin)
(var is_admin (env.ADMINS.contains decoded_jwt.user_id))
(if (! is_admin) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1102)) (status 403)))))
))

(# Get all store books in review)
(var book_objects (TableObject.find_by_property * env.STORE_BOOK_TABLE_ID "status" "review"))
(var books (list))

(for book_object in book_objects (
	(# Get the categories)
	(var categories (func get_category_keys_by_string (store_book.properties.categories)))

	(# Convert the table object to hash)
	(var book (hash
		(uuid book_object.uuid)
		(title book_object.properties.title)
		(description (if (is_nil book_object.properties.description) "" else book_object.properties.description))
		(language book_object.properties.language)
		(price (to_int book_object.properties.price))
		(isbn book_object.properties.isbn)
		(status book_object.properties.status)
		(cover (!(is_nil book_object.properties.cover)))
		(cover_aspect_ratio book_object.properties.cover_aspect_ratio)
		(cover_blurhash book_object.properties.cover_blurhash)
		(file (!(is_nil book_object.properties.file)))
		(file_name book_object.properties.file_name)
		(categories categories)
	))

	(books.push book)
))

(# Render the result)
(render_json (hash
	(books books)
) 200)