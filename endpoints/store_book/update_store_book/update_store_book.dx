(var json (parse_json (get_body)))

(var title json.title)
(var description json.description)
(var language json.language)
(var published json.published)

(# Get the jwt)
(var jwt (get_header Authorization))
(func render_validation_errors ((list
	(func validate_jwt_missing (jwt))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header Content-Type)))
)))

(# Decode the jwt)
(var decoded_jwt (func decode_jwt (jwt)))

(# Validate the dev)
(func render_validation_errors ((list
	(func validate_dev_is_pocketlib_dev (decoded_jwt.dev_id))
)))

(# Get the store book)
(var store_book (func get_table_object (uuid env.STORE_BOOK_TABLE_ID)))

(if (is_nil store_book) (
	(# Render Resource does not exist: StoreBook)
	(func render_validation_errors ((list (hash (error (get_error 2806)) (status 404)))))
))

(# Get the collection of the store book)
(var collection (func get_table_object (store_book.properties.collection env.STORE_BOOK_COLLECTION_TABLE_ID)))

(if (is_nil collection_obj) (
	(# Collection does not exist)
	(func render_validation_errors ((list (hash (error (get_error 2804)) (status 404)))))
))

(# Get the author of the collection)
(var author (func get_table_object (collection.properties.author env.AUTHOR_TABLE_ID)))

(if (is_nil author) (
	(# Author does not exist)
	(func render_validation_errors ((list (hash (error (get_error 2802)) (status 404)))))
))

(# Check if the store book belongs to the author of the user)
(if (decoded_jwt.user_id != author.user_id) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1102)) (status 403)))))
))

(# Validate the property types)
(func render_validation_errors ((list
	(if (!(is_nil title)) (func validate_title_wrong_type (title)))
	(if (!(is_nil description)) (func validate_description_wrong_type (description)))
	(if (!(is_nil language)) (func validate_language_wrong_type (language)))
	(if (!(is_nil published)) (func validate_published_wrong_type (published)))
)))

(# Validate the property length)
(func render_validation_errors ((list
	(if (!(is_nil title)) (func validate_title_too_short (title)))
	(if (!(is_nil title)) (func validate_title_too_long (title)))
	(if (!(is_nil description)) (func validate_description_too_short (description)))
	(if (!(is_nil description)) (func validate_description_too_long (description)))
)))

(# Validate the language)
(func render_validation_errors ((list
	(if (!(is_nil language)) (func validate_language_supported (language)))
)))

(# Set the values)
(if (!(is_nil title)) (var store_book.properties.title title))
(if (!(is_nil description)) (var store_book.properties.description description))
(if (!(is_nil language)) (var store_book.properties.language language))

(if (!(is_nil published)) (
	(var status store_book.properties.status)

	(if ((is_nil status) or (status == "unpublished")) (
		(# Check if the book can be published)
		(var errors (list))

		(if (is_nil store_book.properties.description) (
			(errors.push (hash (error (get_error 1401)) (status 409)))
		))

		(if (is_nil store_book.properties.cover) (
			(errors.push (hash (error (get_error 1402)) (status 409)))
		))

		(if (is_nil store_book.properties.file) (
			(errors.push (hash (error (get_error 1403)) (status 409)))
		))
		
		(if (errors.length > 0) (
			(func render_validation_errors (errors))
		))

		(# Change the status of the book to "review")
		(if published (var store_book.properties.status "review"))
	) elseif (status == "review") (
		(if (! published) (var store_book.properties.status "unpublished"))
	) elseif (status == "published") (
		(if (! published) (var store_book.properties.status "unpublished"))
	))
))

(# Return the store book)
(var status (if (is_nil store_book.properties.status) "unpublished" else store_book.properties.status))

(render_json (hash 
	(uuid store_book.uuid)
	(collection store_book.properties.collection)
	(title store_book.properties.title)
	(description store_book.properties.description)
	(language store_book.properties.language)
	(status status)
	(cover (!(is_nil store_book.properties.cover)))
	(file (!(is_nil store_book.properties.file)))
) 200)