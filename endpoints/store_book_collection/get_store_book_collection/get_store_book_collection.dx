(# Get the jwt)
(var jwt (get_header Authorization))
(func render_validation_errors ((list
	(func validate_jwt_missing (jwt))
)))

(# Decode the jwt)
(var decoded_jwt (func decode_jwt (jwt)))

(# Validate the dev)
(func render_validation_errors ((list
	(func validate_dev_is_pocketlib_dev (decoded_jwt.dev_id))
)))

(# Check if the user is an admin)
(var is_admin (env.ADMINS.contains decoded_jwt.user_id))

(# Get the collection)
(var collection (func get_store_book_collection_table_object (uuid)))

(if (is_nil collection) (
	(# Collection does not exist)
	(func render_validation_errors ((list (hash (error (get_error 2803)) (status 404)))))
))

(# Get the author)
(var author (func get_author_table_object (collection.properties.author)))

(if (is_nil author) (
	(# Author does not exist)
	(func render_validation_errors ((list (hash (error (get_error 2802)) (status 404)))))
))

(# Get the names of the collection)
(var names (func get_collection_names_by_string (collection.properties.names)))

(# Check if the user can access not published books)
(var can_access ((status == "published") or (
	(is_admin or (author.user_id == decoded_jwt.user_id))
)))

(# Get the store books of the collection)
(var store_books (func get_store_books_by_string (collection.properties.books)))

(if (! can_access) (
	(var new_store_books (list))

	(# Sort out store books that are not published)
	(for store_book in store_books (
		(if (store_book.status == "published") (
			(new_store_books.push store_book)
			(up new_store_books)
		))
		(up new_store_books)
	))

	(var store_books new_store_books)
	(up store_books)
))

(# Render the result)
(render_json (hash
	(uuid collection.uuid)
	(author collection.properties.author)
	(names names)
	(books store_books)
))